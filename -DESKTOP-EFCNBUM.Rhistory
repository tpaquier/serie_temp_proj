#==============================================================================#
##### Packages ####
#==============================================================================#
library(zoo)
library(tseries)
library(fUnitRoots)
library(purrr)
#==============================================================================#
##### Import + Traitement ####
#==============================================================================#
data <- read.csv("data/serie_010767848_01052024/tmpZipSerieCsv3541213619101186198/valeurs_mensuelles.csv", header=FALSE, sep=";")
str(data)
data <- data[5:nrow(data), 0:2]
colnames(data) <- c('Date', 'Valeur')
data$Date <- as.Date(paste(data$Date, "-01", sep = ""), format = "%Y-%m-%d")
View(data)
plot(data)
plot(data, linestyle='l')
plot(data, lstyle='l')
View(data)
data <- zoo(data[[1]])
plot(data)
data <- read.csv("data/serie_010767848_01052024/tmpZipSerieCsv3541213619101186198/valeurs_mensuelles.csv", header=FALSE, sep=";")
str(data)
data <- data[5:nrow(data), 0:2]
colnames(data) <- c('Date', 'Valeur')
data$Date <- as.Date(paste(data$Date, "-01", sep = ""), format = "%Y-%m-%d")
data <- zoo(data[[2]])
plot(data)
plot(data, ylim= 500)
plot(data)
data
plot(data)
plot(data, ylim=0)
plot(data, ylim = 200)
data <- read.csv("data/serie_010767848_01052024/tmpZipSerieCsv3541213619101186198/valeurs_mensuelles.csv", header=FALSE, sep=";")
str(data)
data <- data[5:nrow(data), 0:2]
colnames(data) <- c('Date', 'Valeur')
data$Date <- as.Date(paste(data$Date, "-01", sep = ""), format = "%Y-%m-%d")
View(data)
r
data <- ts(data$Valeur, ,start=c(1990,1), end=c(2024,2), frequency=12)
plot(data)
acf(data)
data
head(data)
plot(data)
acf(data)
data <- read.csv("data/serie_010767848_01052024/tmpZipSerieCsv3541213619101186198/valeurs_mensuelles.csv", header=FALSE, sep=";")
str(data)
data <- data[5:nrow(data), 0:2]
colnames(data) <- c('Date', 'Valeur')
data$Date <- as.Date(paste(data$Date, "-01", sep = ""), format = "%Y-%m-%d")
data <- zoo(data[[2]])
ts <- zoo(data[[2]])
plot(ts)
ts
data <- read.csv("data/serie_010767848_01052024/tmpZipSerieCsv3541213619101186198/valeurs_mensuelles.csv", header=FALSE, sep=";")
str(data)
data <- data[5:nrow(data), 0:2]
colnames(data) <- c('Date', 'Valeur')
data$Date <- as.Date(paste(data$Date, "-01", sep = ""), format = "%Y-%m-%d")
ts <- zoo(data[[2]])
ts
plot(ts)
print(ts)
plot(ts, ylim=1000)
plot(ts)
data$Valeur <- as.numeric(data$Valeur)
ts <- zoo(data[[2]])
plot(ts)
acf(ts)
pacf(ts)
lag(ts)
plot(ts - lag(ts, -1))
diff_ts <- ts - lag(ts, -1)
acf(diff_ts)
pacf(diff_ts)
plot(diff_ts)
pp.test(diff_ts)
kpss.test(diff_ts, null='Level')
kpss.test(ts, null='Level')
kpss.test(ts, null='Trend')
?kpss.test
res_kpss <- kpss.test(diff_ts)
res_kpss
str(res_kpss)
?adftest
dates <- as.yearmon(seq(from=1990+1/12,to=2024+1/12,by=1/12))
dates
dates <- as.yearmon(seq(from=1990,to=2024+2/12,by=1/12))
dates
dates <- as.yearmon(seq(from=1990,to=2024+1/12,by=1/12))
dates
#Check for trends using LS
summary(lm(ts ~ dates))
#Check for trends using LS
summary(lm(diff_ts ~ dates))
dates_2 <- as.yearmon(seq(from=1990,to=2024,by=1/12))
#Check for trends using LS
summary(lm(ts ~ dates_2))
#Check for trends using LS
summary(lm(diff_ts ~ dates_2))
dates_diff <- as.yearmon(seq(from=1990,to=2024,by=1/12))
res_adf <- adfTest(ts, lag=0, type="ct")
res_adf
res_adf <- adfTest(diff_ts, lag=0, type="nc")
res_adf
kpss.test(ts)
kpss.test(d_ffts)
kpss.test(diff_ts)
summary(kpss.test(ts))
res_kpss$method
res_kpss
kpss.test(ts)
res_kpss$p.value
res_kpss
x <- 0.3*(1:1000)+rnorm(1000)
kpss.test(x, null = "Trend")
kpss.test(ts)$pvalue
kpss.test(ts)$p.value
x <- seq(1,1000)
x
kpss.test(x)
test_2 <- rnorm(0,1, 1000)
kpss.test(test_2)
test_2 <- rnorm(1000,0, 1)
kpss.test(test_2)
res_adf
adfTest(ts, lag=0, type="ct")
kpss.test(ts, null=c('Trend'))
kpss.test(ts, null=c('Level'))
kpss.test(diff_ts, null=c('Level'))
library(urca)
ur.kpss(diff_ts)
summary(ur.kpss(diff_ts))
summary(ur.kpss(ts))
summary(ur.kpss(ts, type='tau'))
summary(ur.kpss(diff_ts, type='mu'))
plot(ts)
plot(ts, dates)
plot(dates, ts)
#Unit root tests
#ADF
#Hypothesis : Residuals are uncorrelated
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
adfTest(ts, lag=0, type="ct")
View(data)
View(data)
rev(data$Valeur)
data$Valeur <- rev(data$Valeur)
data <- read.csv("data/serie_010767848_01052024/tmpZipSerieCsv3541213619101186198/valeurs_mensuelles.csv", header=FALSE, sep=";")
str(data)
data <- data[5:nrow(data), 0:2]
colnames(data) <- c('Date', 'Valeur')
data$Valeur <- as.numeric(data$Valeur)
data$Date <- as.Date(paste(data$Date, "-01", sep = ""), format = "%Y-%m-%d")
data$Valeur <- rev(data$Valeur)
dates <- as.yearmon(seq(from=1990,to=2024+1/12,by=1/12))
dates_diff <- as.yearmon(seq(from=1990,to=2024,by=1/12))
ts <- zoo(data[[2]])
diff_ts <- ts - lag(ts, -1)
#Check for trends using LS
summary(lm(ts ~ dates))#Strong evidence supporting trend but need to check autocorr first
summary(lm(diff_ts ~ dates_2))
#Unit root tests
#ADF
#Hypothesis to check : Residuals are uncorrelated
adf <- adfTest(ts, lag=0, type="ct")
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(adf@test$lm$residuals24,length(adf@test$lm$coefficients))
plot(ts)
plot(diff_ts)
adff
adf
plot(dates, ts)
summary(ur.kpss(diff_ts, type='mu'))
summary(ur.kpss(ts, type='tau'))
#Unit root tests
#ADF
#Hypothesis to check : Residuals are uncorrelated
adf <- adfTest(ts, lag=0, type="ct")
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(adf@test$lm$residuals24,length(adf@test$lm$coefficients))
adf@test$lm$residuals24
adf@test
adf@test$lm$residuals
adf@test$lm$residuals[24]
adf@test$lm$residuals[0,24]
adf@test$lm$residuals[0:24]
Qtests(adf@test$lm$residuals[0:24],length(adf@test$lm$coefficients))
acf(adf@test$lm$residuals)
pacf(adf@test$lm$residuals)
function(series,kmax,type){ #ADF tests until no more autocorrelated residuals
k <- 0
noautocorr <- 0
while (noautocorr==0){
cat(paste0("ADF with ",k, " lags: residuals OK? "))
adf <- adfTest(series,lags=k,type=type)
pvals <- Qtests(adf@test$lm$residuals,24,fitdf=length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T) == 0) {
noautocorr <- 1; cat("OK \n")}
else cat("nope \n")
k <- k + 1
}
return(adf)
}
adf <- adfTest valid(spread,24,"ct")
adf <- adfTest_valid(spread,24,"ct")
adfTest valid <-function(series,kmax,type){ #ADF tests until no more autocorrelated residuals
adf <- adfTest_valid(spread,24,"ct")
adfTest_valid <-function(series,kmax,type){ #ADF tests until no more autocorrelated residuals
k <- 0
noautocorr <- 0
while (noautocorr==0){
cat(paste0("ADF with ",k, " lags: residuals OK? "))
adf <- adfTest(series,lags=k,type=type)
pvals <- Qtests(adf@test$lm$residuals,24,fitdf=length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T) == 0) {
noautocorr <- 1; cat("OK \n")}
else cat("nope \n")
k <- k + 1
}
return(adf)
}
adf <- adfTest_valid(spread,24,"ct")
adf <- adfTest_valid(ts,24,"ct")
adf <- adfTest(spread, lag=2, type="ct")
adf <- adfTest(ts, lag=2, type="ct")
adf
adf <- adfTest(ts, lag=2, type="ct")
adf
git branch matthieu
#Unit root tests
#ADF
#Hypothesis to check : Residuals are uncorrelated
adf <- adfTest(ts, lag=0, type="ct")
adf
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(adf@test$lm$residuals[0:24],length(adf@test$lm$coefficients))
acf(adf@test$lm$residuals)
adfTest_valid <-function(series,kmax,type){ #ADF tests until no more autocorrelated residuals
k <- 0
noautocorr <- 0
while (noautocorr==0){
cat(paste0("ADF with ",k, " lags: residuals OK? "))
adf <- adfTest(series,lags=k,type=type)
pvals <- Qtests(adf@test$lm$residuals,24,fitdf=length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T) == 0) {
noautocorr <- 1; cat("OK \n")}
else cat("nope \n")
k <- k + 1
}
return(adf)
}
adfTest valid(ts,24,"ct")
adfTest_valid(ts,24,"ct")
adfTest_valid(diff_ts,24, type="nc")
adfTest_valid(ts,24,"ct")
?adfTest
#==============================================================================#
##### Packages ####
#==============================================================================#
library(zoo)
library(tseries)
library(fUnitRoots)
library(purrr)
#==============================================================================#
##### Import + Traitement ####
#==============================================================================#
data <- read.csv("data/serie_010767848_01052024/tmpZipSerieCsv3541213619101186198/valeurs_mensuelles.csv", header=FALSE, sep=";")
str(data)
data <- data[5:nrow(data), 0:2]
colnames(data) <- c('Date', 'Valeur')
data$Valeur <- as.numeric(data$Valeur)
data$Date <- as.Date(paste(data$Date, "-01", sep = ""), format = "%Y-%m-%d")
data$Valeur <- rev(data$Valeur)
dates <- as.yearmon(seq(from=1990,to=2024+1/12,by=1/12))
dates_diff <- as.yearmon(seq(from=1990,to=2024,by=1/12))
ts <- zoo(data[[2]])
diff_ts <- ts - lag(ts, -1)
#Check for trends using LS
summary(lm(ts ~ dates))#Strong evidence supporting trend but need to check autocorr first
summary(lm(diff_ts ~ dates_2))
#Unit root tests
#ADF
#Hypothesis to check : Residuals are uncorrelated
adf <- adfTest(ts, lag=0, type="ct")
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(adf@test$lm$residuals[0:24],length(adf@test$lm$coefficients))
plot(ts)
plot(dates, ts)
plot(x=dates, y=ts, type='l',
xlab = 'date',
ylab = "valeur de l'indice (base 100 en 2021)",
main = 'plot de la série de 1990 à 2024')
#Check for trends using LS
summary(lm(ts ~ dates))#Strong evidence supporting trend but need to check autocorr first
